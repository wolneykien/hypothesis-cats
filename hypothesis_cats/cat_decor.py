# This file is a part of the Hypothesis-Cats Python package.
#
# Copyright (C) 2022  Paul Wolneykien <manowar@altlinux.org>
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301, USA.

"""
Hypothesis-Cats allows you to classify values generated by a
`Hypothesis <https://hypothesis.readthedocs.io/en/latest/>`_
strategy. This module defines decorator functions that help to supply
categorized data to test functions in form of strategies and examples.
"""

from typing import Union, Any, Callable, Mapping

from hypothesis import given, example
from hypothesis.strategies import SearchStrategy

from .cat_strategies import cat, cats, cats_desc, subdivide
from .cat_checks import parseCats, CatChecker

CATS_LAYOUT_ARG = '_layout_'
CATS_DESC_ARG = '_desc_'

def copy_desc(in_desc: Mapping[str, Mapping[str, Mapping[str, Any]]], out_desc:dict[str, dict[str, Mapping[str, Any]]]):
    """
    """
    for cls in in_desc:
        out_desc[cls] = {}
        for ctg_name in in_desc[cls]:
            out_desc[cls][ctg_name] = in_desc[cls][ctg_name]

    return out_desc

def given_divided(*desc_list: Mapping[str, Mapping[str, Mapping[str, Any]]], **desc_dict: Mapping[str, Mapping[str, Any]]) -> Callable:
    """
    """
    desc: dict[str, dict[str, Mapping[str, Any]]]  = {}
    for d in desc_list:
        copy_desc(d, desc)
    copy_desc(desc_dict, desc)

    data_layout: dict[str, SearchStrategy[Any]] = {}
    for cls in desc:
        cls_layout = []
        for ctg_name in desc[cls]:
            ctg_desc = desc[cls][ctg_name]
            if isinstance(ctg_desc, SearchStrategy):
                ctg_strategy = ctg_desc
                desc[cls][ctg_name] = {
                    'name': ctg_name,
                    'values': ctg_strategy
                }
            else:
                ctg_strategy = ctg_desc['values']
            cls_layout.append(cat(ctg_name, ctg_strategy))
        data_layout[cls] = subdivide(cls, *cls_layout)

    ctg_defs = parseCats(desc)

    data_layout[CATS_LAYOUT_ARG] = cats()
    data_layout[CATS_DESC_ARG] = cats_desc(ctg_defs)

    return given(**data_layout)
